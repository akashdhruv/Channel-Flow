#!/usr/bin/env python3

# Standard libraries
import itertools
import numpy
import matplotlib.pyplot as pyplot

# BoxKit library
import boxkit.api as boxkit

# Define inputs filetag and xslice location
filetag = 200
xslice_loc = 8.0
eps = 1e-6

# Create filenames with proper path
filenames = [
    "neumann/INS_Channel_Flow_hdf5_plt_cnt_" + str(filetag).zfill(4),
    "outflow/INS_Channel_Flow_hdf5_plt_cnt_" + str(filetag).zfill(4),
]

# Create a BoxKit dataset
dataset_list = [boxkit.read.dataset(filename, source="flash") for filename in filenames]

# Create the slice object from BoxKit
xslice_list = [
    boxkit.create.slice(dataset, xmin=xslice_loc - eps, xmax=xslice_loc - eps)
    for dataset in dataset_list
]

# Create empty lists for profile values
profile_loc_list = []
profile_val_list = []

# Loop over blocks in the slice
for xslice in xslice_list:

    profile_val = numpy.array([])
    profile_loc = numpy.array([])

    for block in xslice.blocklist:

        # Get xindex corresponding to xslice_loc
        xindex = (numpy.abs(block.xrange("center") - xslice_loc)).argmin()

        # Build velocity profile information
        profile_loc = numpy.append(profile_loc, block.yrange("center"))
        profile_val = numpy.append(profile_val, block["velx"][0, :, xindex])

    profile_loc_list.append(profile_loc)
    profile_val_list.append(profile_val)

# Create a figure object and set styling
pyplot.rc("font", family="serif", size=14, weight="bold")
pyplot.rc("axes", labelweight="bold", titleweight="bold")
pyplot.rc("text", usetex=True)
figure = pyplot.figure(figsize=(5, 3))

# Set marker list
marker = itertools.cycle(("o", "s", "d", ".", "*"))

# create a subfigure object
ax = figure.add_subplot()

# Loop over data and plot
for profile_val, profile_loc in zip(profile_val_list, profile_loc_list):
    ax.plot(
        profile_val,
        profile_loc,
        # marker=next(marker),
        # markevery=[0] + [*range(1, len(profile_loc) - 1, 10)] + [len(profile_loc) - 1],
        # markersize=5,
    )

# Ticks and limits
ax.set_xticks([0.0, 0.5, 1.0])
ax.set_yticks([-0.5, 0.0, 0.5])

# Set labels, title, and legend
ax.set_xlabel(r"$U(y)/u_0$")
ax.set_ylabel(r"$y/l_0$")
ax.set_title(r"$x/l_0={0}$".format(xslice_loc))
ax.legend(["without Forcing", "with Forcing"])

# Save figure
pyplot.tight_layout()
pyplot.savefig("velprofile.png", dpi=300)
